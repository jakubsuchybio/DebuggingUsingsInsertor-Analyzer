using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

//Copied from Code Cracker extension for Visual Studio
//Code Cracker can be found here: https://github.com/code-cracker/code-cracker
namespace USI
{
	public static class GeneratedCodeAnalysisExtensions
	{
		public static bool HasAutoGeneratedComment(this SyntaxTree tree)
		{
			var root = tree.GetRoot();
			if( root == null ) return false;
			var firstToken = root.GetFirstToken();
			SyntaxTriviaList trivia;
			if( firstToken == default(SyntaxToken) )
			{
				var token = ( (CompilationUnitSyntax)root ).EndOfFileToken;
				if( !token.HasLeadingTrivia ) return false;
				trivia = token.LeadingTrivia;
			}
			else
			{
				if( !firstToken.HasLeadingTrivia ) return false;
				trivia = firstToken.LeadingTrivia;
			}

			var commentLines = trivia.Where( t => t.IsKind( SyntaxKind.SingleLineCommentTrivia ) ).Take( 2 ).ToList();
			if( commentLines.Count != 2 ) return false;
			return commentLines[1].ToString() == "// <auto-generated>";
		}

		public static bool IsGenerated(this SyntaxTreeAnalysisContext context) => context.Tree?.IsGenerated() ?? false;

		public static bool IsGenerated(this SyntaxTree tree) => ( tree.FilePath?.IsOnGeneratedFile() ?? false ) || tree.HasAutoGeneratedComment();

		public static bool IsOnGeneratedFile(this string filePath) =>
			Regex.IsMatch(filePath , @"(\\service|\\TemporaryGeneratedFile_.*|\\assemblyinfo|\\assemblyattributes|\.(g\.i|g|designer|generated|assemblyattributes))\.(cs|vb)$" ,
				RegexOptions.IgnoreCase);
	}
}